#include <WiFi.h>
#include <ArduinoJson.h>

#include "config.h"
#include "led_status.h"
#include "espnow_handler.h"
#include "protocol_handler.h"
#include "serial.h"
#include "watch_dog.h"
#include "led_display.h"

// Define Preferences object
Preferences preferences;

LedStatus led(LED_PIN, /*activeHigh=*/false); // n·∫øu LED n·ªëi ki·ªÉu active-LOW
Hub66s::LedDisplay ledDisplay;                // Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng t·ª´ l·ªõp LedDisplay

// C·∫•u tr√∫c d·ªØ li·ªáu License
LicenseInfo globalLicense;
PayloadStruct message;

// Bi·∫øn l∆∞u c·∫•u h√¨nh
int config_lid = 115;
int config_id = 2011; // ID c·ªßa HUB66S
int id_des = 1001;    // ID c·ªßa LIC66S
String device_id = "HUB66S_001";

bool config_processed = false;
char jsonBuffer[BUFFER_SIZE];
int bufferIndex = 0;
bool expired_flag = false; // C·ªù h·∫øt h·∫°n
uint8_t expired = 0;       // Bi·∫øn l∆∞u tr·∫°ng th√°i h·∫øt h·∫°n
uint32_t now;
time_t start_time = 0;          // th·ªùi ƒëi·ªÉm b·∫Øt ƒë·∫ßu t√≠nh th·ªùi gian
const uint32_t duration = 60;   // Gi√° tr·ªã c·ªë ƒë·ªãnh sau khi g√°n l·∫ßn ƒë·∫ßu cho license
uint32_t lastSendTime = 0;      // Th·ªùi ƒëi·ªÉm g·ª≠i g√≥i tin g·∫ßn nh·∫•t
uint32_t lastRuntimeUpdate = 0; // Th·ªùi ƒëi·ªÉm c·∫≠p nh·∫≠t runtime g·∫ßn nh·∫•t
// uint32_t lastPacketNodeId = 0; // Ch·ªâ ·ªü m·ªôt ch·ªó duy nh·∫•t!

// bool networkConnected = false;
uint32_t runtime = 0;
uint32_t nod = 0; // s·ªë l∆∞·ª£ng thi·∫øt b·ªã gi·∫£ ƒë·ªãnh 10
bool dang_gui = false; // c·ªù ƒëang g·ª≠i
uint32_t lastTime = 0; // th·ªùi ƒëi·ªÉm g·ª≠i l·∫ßn cu·ªëi
uint8_t retries = 0;   // s·ªë l·∫ßn ƒë√£ th·ª≠ g·ª≠i

uint8_t lastPacketData[512]; // c≈© 250 L∆∞u payload (c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc tu·ª≥ theo nhu c·∫ßu, ·ªü ƒë√¢y b·∫±ng t·ªëi ƒëa c·ªßa PayloadStruct)
esp_now_recv_info lastRecvInfo;

// L∆∞u MAC c·ªßa g√≥i v·ª´a nh·∫≠n
uint8_t lastPacketMac[6];
volatile bool hasNewPacket = false; // L∆∞u ƒë·ªô d√†i payload
int lastPacketLen;
// L∆∞u payload (c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc tu·ª≥ theo nhu c·∫ßu, ·ªü ƒë√¢y b·∫±ng t·ªëi ƒëa c·ªßa PayloadStruct)

void xu_ly_dang_gui()
{
  // Ch·ªâ x·ª≠ l√Ω khi ƒëang trong tr·∫°ng th√°i g·ª≠i
  if (!dang_gui)
    return;

  uint32_t now = millis();
  // Ch∆∞a ƒë·ªß 1s k·ªÉ t·ª´ l·∫ßn g·ª≠i tr∆∞·ªõc th√¨ b·ªè qua
  if (now - lastTime < 1000)
    return;

  // ƒê√£ ƒë·ªß 1s, c·∫≠p nh·∫≠t th·ªùi ƒëi·ªÉm v√† th·ª≠ g·ª≠i
  lastTime = now;
  xu_ly_data(&lastRecvInfo, lastPacketData, lastPacketLen);
  Serial.println("üì§ ƒêang g·ª≠i g√≥i tin...");
  // g·ªçi h√†m truy·ªÅn data
  // G·ª≠i th·∫•t b·∫°i, tƒÉng b·ªô ƒë·∫øm v√† th·ª≠ l·∫°i
  retries++;
  if (retries >= 3)
  {
    // ƒê√£ th·ª≠ 3 l·∫ßn m√† v·∫´n fail ‚Üí d·ª´ng g·ª≠i
    dang_gui = false;
    retries = 0;
  }
}
void setup()
{
  Serial.begin(115200);
  delay(1000);
  Serial.println("\nüåü HUB66S Receiver Started");
  ledDisplay.begin();          // Kh·ªüi t·∫°o module LED hi·ªÉn th·ªã
  Hub66s::WatchDog::begin(10); // ‚≠ê kh·ªüi t·∫°o WDT 10 s (to√†n chip reset khi qu√° h·∫°n)

  WiFi.mode(WIFI_STA); // Enable Wi-Fi in Station mode for ESP-NOW
  delay(100);
  // WiFi.setTxPower(WIFI_POWER_2dBm);
  initEspNow();                     // Initialize ESP-NOW
  configTime(0, 0, "pool.ntp.org"); // Configure NTP for time synchronization

  esp_now_register_recv_cb(onReceive); // Register receive callback

  loadLicenseData();
  // Bi·∫øn tr·∫£ v·ªÅ gi√° tr·ªã c·ªßa node
  globalLicense.lid = config_lid;
  globalLicense.id = config_id;
  globalLicense.nod = nod;

  // Kh·ªüi t·∫°o tr·∫°ng th√°i expired d·ª±a tr√™n globalLicense
  if (globalLicense.remain > 0 && !globalLicense.expired_flag)
  {
    expired = 0; // Gi·∫•y ph√©p c√≤n h·∫°n
  }
  else
  {
    expired = 1; // Gi·∫•y ph√©p h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá
  }
  saveLicenseData();
  led.setState(CONNECTION_ERROR);
}

void loop()
{
  recPC();
  serialPC();
  led.update();
  ledDisplay.update(); // C·∫≠p nh·∫≠t hi·ªÉn th·ªã m√†n h√¨nh LED
  delay(10);           // Gi·∫£m t·∫£i CPU

  // Ki·ªÉm tra license v√† g·ª≠i th√¥ng tin ƒë·ªãnh k·ª≥
  uint32_t nowMillis = millis();
  if (nowMillis - lastRuntimeUpdate >= 60000)
  {
    lastRuntimeUpdate = nowMillis;
    now = time(nullptr);

    if (globalLicense.lid != 0 && globalLicense.duration > 0)
    {
      runtime++; // tƒÉng th·ªùi gian ch·∫°y t·ª´ng ph√∫t
      preferences.begin("license", false);
      preferences.putULong("runtime", runtime);
      preferences.end();
      globalLicense.remain = globalLicense.duration > runtime ? globalLicense.duration - runtime : 0; // NgƒÉn remain √¢m

      // Ki·ªÉm tra license h·∫øt h·∫°n
      if (globalLicense.remain <= 0 && !globalLicense.expired_flag)
      {
        globalLicense.expired_flag = true;
        globalLicense.remain = 0;
        expired = 1; // Gi·∫•y ph√©p h·∫øt h·∫°n
        saveLicenseData(false);
      }
      else if (globalLicense.remain > 0 && globalLicense.expired_flag)
      {
        globalLicense.expired_flag = false;
        expired = 0; // Gi·∫•y ph√©p c√≤n h·∫°n
        saveLicenseData(false);
      }
      else
      {
        saveLicenseData(false);
      }
    }
    else
    {
      // Gi·∫•y ph√©p kh√¥ng h·ª£p l·ªá
      expired = 1; // H·∫øt h·∫°n
      globalLicense.expired_flag = true;
      globalLicense.remain = 0;
      saveLicenseData(false);
    }
    // C·∫≠p nh·∫≠t LED tr·∫°ng th√°i
    if (globalLicense.expired_flag || globalLicense.remain <= 0)
    {
      led.setState(LICENSE_EXPIRED); // LED t·∫Øt
    }
    else
    {
      led.setState(NORMAL_STATUS); // LED s√°ng li√™n t·ª•c
    }
  }
  if (hasNewPacket)
  {
    // G·ªçi h√†m x·ª≠ l√Ω v·ªõi ƒë√∫ng ki·ªÉu
    xu_ly_data(&lastRecvInfo, lastPacketData, lastPacketLen);
    // Reset c·ªù
    hasNewPacket = false;
    dang_gui = true;
    retries = 0;
  }
  xu_ly_dang_gui();

  Hub66s::WatchDog::feed(); // Reset WDT timer
  // delay(100); // Gi·∫£m t·∫£i CPU
}
